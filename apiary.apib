FORMAT: 1A

# Identity
This document defines all of the **REST**(ish) API's available from Identity.  They are loosely 
grouped by resource type or function where possible.

# Group User Resources
This group defines the actions that can be performed on the resource **user**.

## Match User [/matchuser]
The Match API is an interface between Sainsburys missions (Entertainment, TU Clothing, Bank...).
The aim of this API is to try to match the input parameters defined in the body to user
attributes within the one or more missions at Sainsburys.

+ Attributes (MatchUserRequest)
            

### Match [POST]
This `POST` action calls each of the defined missions to see if a match for the **user**
exists.  The request supplies a list of attributes used for matching purposes by each mission, the
response lists the mission(s) where a match occured along with details of the matched **user** account.

+ Request (application/json)
    + Headers
    
            Accept: application/json
    
    + Attributes (MatchUserRequest)

+ Response 200 (application/json)

    + Attributes (MatchUserResponse)

            
## Verify User [/verify]
The Verify API is an interface between Sainsburys missions (Entertainment, TU Clothing, Bank...).
The aim of this API is to try to verify a user within a specific mission at Sainsburys.

+ Attributes (VerifyUserRequest)
    
### Verify [POST]
Verify user credentials attributes response.

+ Request (application/json)
    + Headers
    
            Accept: application/json

    + Attributes (VerifyUserRequest)
            
+ Response 200 (application/json)

    + Attributes (VerifyUserResponse)
    
            
## Merge [/mergeuser]
The Merge API is an interface between Sainsburys missions (Entertainment, TU Clothing, Bank...).
The aim of this API is to try to merge other Sainsburys accounts into the identity My Account.

+ Attributes (MergeUserRequest)

### Merge accounts into the Identity My Account [POST]
Get a response for the Merging of user attributes.

+ Request (application/json)
    + Headers
    
            Accept: application/json

    + Attributes (MergeUserRequest)
            
+ Response 200 (application/json)

    + Attributes (MergeUserResponse)

    
# Group Update Resources

## Nectar [/updateNectar]
The Update Nectar API is a REST API for adding multiple nectar card number assoiciated with a
**user**.

+ Attributes (UpdateNectarRequest)

### Add Nectar Card [POST]
Get a response for the updating of user attribute nectar card.

+ Request (application/json)
    + Headers
    
            Accept: application/json

    + Attributes (UpdateNectarRequest)
    
+ Response 200 (application/json)

    + Attributes (UpdateNectarResponse)
            
## Mobile [/updateMobile]
The Update Mobile List API is a REST API for adding multiple mobile numbers to a mobile list assoiciated with a User.

### Add Mobile Number [POST]
Get a response for the Updating of user attribute mobile.

+ Request (application/json)
    + Headers
    
            Accept: application/json

    + Body
    
            {
                "uid"    : "shahs7784",
                "mobile" : "07123456789"
            }
            
+ Response 200 (application/json)

    + Body
    
            {
                "message" : "success",
                "code"    : "200",
                "id_code" : "2000"
            }

## Password Recovery [/passwordrecovery]
The Password Recovery API will allow a user to initiate a password recovery for a mission via Identity.

### Recover Password [GET]
Get a response from a mission that a password recovery was initiated.

+ Request (application/json)
    + Headers
    
            Accept: application/json

    + Body
    
            {
                "mission" : "ENTS",
                "user_id" : "s.shah@email.com"
            }
            
+ Response 200 (application/json)

    + Body
    
            {
                "mission" : "ENTS",
                "message" : "success",
                "code"    : "200",
                "id_code" : "2000"
            }

## Available Missions [/availableMissions]
The Avaialble Missions API is a REST API for getting the currently available missions.

### Get available missions [GET]
Get a response for the currently available missions.

+ Request (application/json)
    + Headers
    
            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "code"              : "200",
                "availableMissions" : {
                    "mission": [
                        {"id": "GOL", "name": "Groceries"},
                        {"id": "ENTS", "name": "Entertainment"},
                        {"id": "TU", "name": "Clothing"},
                        {"id": "MOBILE", "name": "Mobile"},
                        {"id": "SMARTSHOP", "name": "Smartshop"},
                        {"id": "BANK", "name": "Bank"}
                    ]
                }
            }

# Group Payment Card Resources

## Add Card [/registercard]
The add card service allows for the adding of a payment card to the users MyAccount profile.
The API acts as a service end point for missions withing Sainsburys and will handle all remote calls to TLG.

### Add Payment Card [POST]
Get an autorisation response for adding card.

+ Request (application/json)
    + Headers
    
            Accept: application/json

    + Body
    
            {
                "amount"      : "1",
                "description" : "Adding A New Payment Card",
                "resultpage"  : "http://www.sainsburys.com"
            }
            
+ Response 200 (application/json)

    + Body
    
            {
                "responsecodes": {
                    "idcode": "2000",
                    "code": "200"
                },
                "message": "success",
                "transno": "8542746272",
                "transref": "8baf67b9-7d83-413e-baa6-7120d29b3e50",
                "url": "https://etestws1.secure-payment-processing.com/SOLVESAIN1/pages/paypage.jsf?transref\u003d8baf67b9-7d83-413e-baa6-7120d29b3e50\u0026store\u003d040006"
            }
            
## Verify Card [/verifycard]

### Verify Payment Card [POST]

+ Request (application/json)
    + Headers
    
            Accept: application/json

    + Body
    
            {
                "transno"  : "123456789",
                "transRef" : "ff5343b2-38e0-403b-8fed-f0dc4d628b2b"
            }
            
+ Response 200 (application/json)

    + Body
    
            {
                "uniqueid" : "d7017ab0-f22a-4cb0-b657-f648ff2e1877",
                "result"   : "success"
            }

# Group Bumblebee Nectar Card Resources

## Get card info [/get-nectarcard-info]
Checks the linking status and points balance of a Nectarcard.

### Get nectar card info [POST]
Checks the linking status and points balance of a Nectarcard.

    Response Codes
        200 Success
        422 Unprocessable Entity - when the request is malformed.
        500 Internal Server Error
        
+ Request (application/json)
    + Headers
    
            Accept: application/json

    + Attributes (object)
        + nectar_number: 1234567890 - Nectar card number
        
    + Body
    
            {
                "nectar_number"      :   "68497459019"
            }
            
+ Response 200 (application/json)

    + Attributes (object)
        + user_email_address: syed.shah@email.com (string) - The email address stored against the given Nectarcard number.
        + linked_status: NOT (string) - One of: NOT (not linked), LKD (linked), UNL (unlinked when previously linked), CLD (linking process cancelled while the user was trying to link the card number).
        + points_balance: 3456 (number) - Number of points currently on the card
        + balance_age_seconds: 3456644433 (number) - Time in seconds since the balance was last updated from the live balance stored by the Aimia Nectar service.

    + Body
    
            {
                "user_email_address"  : "test001.bumblebee@sainsburysentertainment.co.uk",
                "linked_status"       : "LKD",
                "points_balance"      : "2500",
                "balance_age_seconds" : 3602627
            }

## Link card [/link-nectarcard]
Checks the linking status and points balance of a Nectarcard.

### Linking a card [POST]
Initiates the card linking process, to link a Nectarcard to a user.

    Request Attributes
        "nectar_number"      : Nectarcard number
        "user_email_address" : The user's email address
        "return_url"         : The URL to redirect the browser to, when the linking process eventually succeeds

    Response Attributes
        user_email_address : The email address provided in the request.
        uuid               : A UUID used by Bumblebee in some URLs
        linking_url        : The URL to redirect the browser to at the end of the linking process

    Response Codes
        200 Success
        422 Unprocessable Entity - when the request is malformed.
        500 Internal Server Error
        
+ Request (application/json)
    + Headers
    
            Accept: application/json

    + Body
    
            {
                "nectar_number"      : "68497459019",
                "user_email_address" : "test001.bumblebee@sainsburysentertainment.co.uk",
                "return_url"         : "http://aservice.sainsburys.co.uk/nectarlinked"
            }
            
+ Response 200 (application/json)

    + Body
    
            {
                "user_email_address" : "test001.bumblebee@sainsburysentertainment.co.uk",
                "uuid"               : "dfb299ee-0b91-4314-8e2a-109ec2e8711e",
                "linking_url"        : "https://dev-nectar-linking.sainsburys.co.uk/link/nectar/dfb299ee-0b91-4314-8e2a-109ec2e8711e"
            }
        
## Unlink card [/unlink-nectarcard]
Initiates the card unlinking process, to remove the link between the Nectarcard and a user.

### Unlink Card [POST]
Request Attributes
    "nectar_number" : Nectarcard number

Response Attributes
    user_email_address : the email address stored against the given Nectarcard number.
    status             : one of "ok" or "fail_account". This is informational only.
                         The status string 'account_fail' means that that there was an issue on the Aimia account side, and the actual response status code is 200/OK rather than an error response.

+ Request (application/json)
    + Headers
    
            Accept: application/json

    + Body
    
            {
                "nectar_number" : "68497459019"
            }
            
+ Response 200 (application/json)

    + Body
    
            {
                "user_email_address" : "test001.bumblebee@sainsburysentertainment.co.uk",
                "status"             : "fail_account"
            }
            
# Data Structures

## ResponseCodes (object)
- code:     200     (string) - Status code from any API call external to Identity.
- idcode:   2000    (string) - Status code from Identity.


## MatchUserRequest (object)
+ mission:   ENTS             (string) - Short identifier used to locate mission to request match against.
+ userid:    s.shah@email.com (string) - Email address for user to match.
+ nectar:    1234567890       (string) - Nectar card number for user to match.
+ firstname: syed             (string) - Firstname of user to match.
+ lastname:  shah             (string) - Lastname of user to match.


## MatchedMissionAccounts (object)
+ lastloggedin:         1457439635          (string) - Timestamp identifying last login time for user on defined mission.
+ missionUserId:        s.shah@email.com    (string) - User identifier from matching mission.
+ missionUserUUID:      123ABC              (string) - Mission specific identifier.
+ loa:                  1.0                 (number) - Level of authentication identifier.

## MatchUserResponse (object)
+ mission:                  ENTS                (string) - Short identifier for mission that has successfully matched this user.
+ matchedmissionaccounts    (MatchedMissionAccounts) - Object containing details about the match mission account.
+ message:                  success             (string) - Message identifying status of call.
+ responsecodes (ResponseCodes) - Object containing list of response codes from call.


## VerifyUserRequest (object)
+ mission:  ENTS                                (string) - Mission to verify user against.
+ id:       id                                  (string) - User identifier.
+ userid:   s.shah@email.com                    (string) - User identifier.
+ password: e807f1fcf82d132f9bb018ca6738a19f    (string) - Users password.
    

## VerifyUserResponse (object)
+ mission:    ENTS              (string) - Short identifier for mission that has successfully verified this user.
+ userid:     s.shah@email.com  (string) - User Identifier
+ message:    200               (string) - Message identifying status of call.


## MergeUserRequest (object)
+ mission:  ENTS
+ UUID:     6c59c99d-2c6b-4d65-adf0-7121da1ed76b
+ userid:   s.shah@email.com


## MergeUserResponse (object)
+ mission:  ENTS
+ message:  success
+ code:     200
+ id_code:  2000


## UpdateNectarRequest
+ UUID:                 6c59c99d-2c6b-4d65-adf0-7121da1ed76b
+ nectarcard_number:    0123456789


## UpdateNectarResponse
+ message:  success
+ code:     200
+ id_code:  2000